name: ci-ingestion

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: build-image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URI: ${{ steps.push.outputs.IMAGE_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.ACCESSKEYID}}
          aws-secret-access-key: ${{secrets.SECRETACCESSKEY}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to ECR
        id: push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ingestion-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "IMAGE_URI=HELLOOOOO" >> $GITHUB_OUTPUT
# docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
# docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
# docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
# docker push $REGISTRY/$REPOSITORY:latest

  deploy:
    name: deploy image to lambda
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.ACCESSKEYID}}
          aws-secret-access-key: ${{secrets.SECRETACCESSKEY}}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy to lambda
        env:
          FUNCTION_NAME: python-ingestor
          IMAGE_NAME: ${{ needs.build.outputs.IMAGE_URI }}
        run: |
          pip3 install awscli
          echo "IMAGE -- $IMAGE_URI"
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI
